#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'active_support/core_ext/string/inflections'
require 'nokogiri'

if ARGV.size < 1
  puts "syntax: faa_get_tfrs <path-to-json-output-file>"
  exit 1
end

JSON_FILE = ARGV[0]

LIST_URL = 'https://tfr.faa.gov/tfr2/list.html'
BASE_URL = 'https://tfr.faa.gov/save_pages/'
ORIGIN   = 'https://www.faa.gov'
REFERER  = 'https://www.faa.gov'

def retrieve_list
  puts "Retrieving list of TFRs"
  uri = URI.parse(LIST_URL)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  http.get(uri.request_uri)
end

def process_list(html)
  document = Nokogiri::HTML(html)
  table = document.search('table table')[2]
  rows = table.search('tr')[5..-4]
  rows.map do |row|
    columns = row.search('a')
    {
      date: columns[0] ? columns[0].text.strip : nil,
      notam: columns[1] ? columns[1].text.strip : nil,
      facility: columns[2] ? columns[2].text.strip : nil,
      state: columns[3] ? columns[3].text.strip : nil,
      type: columns[4] ? columns[4].text.strip : nil,
      short_description: columns[5] ? columns[5].text.strip : nil,
      links: {
        details: columns[1].attr('href').sub('..', 'https://tfr.faa.gov'),
        zoom: columns[6] ? "https://tfr.faa.gov#{columns[6].attr('href')}" : nil,
        xml: columns[1].attr('href').sub('..', 'https://tfr.faa.gov').sub('html', 'xml'),
        aixm5: columns[1].attr('href').sub('..', 'https://tfr.faa.gov').sub('html', 'aixm5')
      }
    }
  end
end

def retrieve_detail(notam)
end

def retrieve_xml(notam, url)
  puts "Retrieving XML for NOTAM #{notam}"
  uri = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  http.get(uri.request_uri)
end

def process_xml(tfr, xml)
  doc = Nokogiri::XML(xml)
  notam = doc.xpath('//Group/Add/Not')
  tfr[:timezone] = notam.xpath('//codeTimeZone').text
  uid = notam.xpath('//NotUid')
  tfr[:local_name] = uid.xpath('//txtLocalName').text
  tfr[:sequence_number] = uid.xpath('//noSeqNo').text
  tfr[:date_issued] = uid.xpath('//dateIssued').text

  tfr_notam = notam.xpath('//TfrNot')
  tfr[:coordinating_facility_type] = notam.xpath('//codeCoordFacilityType').text
  tfr[:control_facility_type] = tfr_notam.xpath('//codeCtrlFacilityType').text

  area_group = tfr_notam.xpath('//TFRAreaGroup')
  merged_area = area_group.xpath('//abdMergedArea')
  tfr[:area_group] = {}
  tfr[:area_group][:merged_area] = {}
  tfr[:area_group][:merged_area][:points] = merged_area.xpath('//Avx').map do |avx|
    {
      datum: avx.xpath('codeDatum').text,
      type: avx.xpath('codeType').text,
      latitude: avx.xpath('geoLat').text,
      longitude: avx.xpath('geoLong').text
    }
  end

  tfr[:description] = notam.xpath('//txtDescrTraditional').text
  tfr[:description_usns] = notam.xpath('//txtDescrUSNS').text
  tfr
end

def retrieve_aixm5(notam)
end

def convert_notam_to_path(notam)
  notam.gsub("/", "_")
end

tfrs = []
res = retrieve_list
if res.code == '200'
  tfrs = process_list(res.body)
else
  puts "Error: #{res.code}"
end

tfrs = tfrs.map do |tfr|
  res = retrieve_xml(tfr[:notam], tfr[:links][:xml])
  if res.code == '200'
    tfr = process_xml(tfr, res.body)
  else
    puts "Error: #{res.code}"
  end
  tfr
end

content = {
  resource_type: 'tfr',
  attribution: {
    name: 'FAA',
    url: 'https://tfr.faa.gov/tfr2/list.html'
  },
  count: tfrs.size,
  tfrs: tfrs
}

File.open(JSON_FILE, 'w') do |f|
  f.write(JSON.pretty_generate(content))
end

puts "Retrieved #{tfrs.size} TFRs and wrote to #{JSON_FILE}."
